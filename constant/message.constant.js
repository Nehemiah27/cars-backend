export const envErrors = {
    PORT_REQUIRED: "Node JS hosting port is required",
    PORT_MUST_BE_NUMBER: "Node JS hosting port must be a number",
    MONGODB_URL_REQUIRED: "Couldn't find mongoDB URL",
    MONGODB_URL_MUST_BE_STRING: "MongoDB URL must be a type of string",
    MONGODB_URL_EMPTY: "MongoDB URL should not be empty",
  },
  addCarErrors = {
    CATEGORY_STRING: "Car Category must be of string type",
    CATEGORY_EMPTY: "Car Category cannot be empty",
    CATEGORY_REQUIRED: "Car Category is a required field",
    NAME_STRING: "Car Name must be of string type",
    NAME_EMPTY: "Car Name cannot be empty",
    NAME_REQUIRED: "Car Name is a required field",
    PRICE_NUMBER: "Price must be a type of number",
    PRICE_POSITIVE: "Price should be a positive Integer",
    PRICE_REQUIRED: "Price is a required field",
    KMS_DRIVEN_NUMBER: "kms Driven must be a type of number",
    KMS_DRIVEN_POSITIVE: "kms Driven should be a positive Integer",
    KMS_DRIVEN_REQUIRED: "kms Driven is a required field",
    FUEL_TYPE_STRING: "Fuel Type must be of string type",
    FUEL_TYPE_EMPTY: "Fuel Type cannot be empty",
    FUEL_TYPE_REQUIRED: "Fuel Type is a required field",
    REG_STATE_STRING: "Registration State must be of string type",
    REG_STATE_EMPTY: "Registration State cannot be empty",
    REG_STATE_REQUIRED: "Registration State is a required field",
    FEATURED_VIDEO_STRING: "Featured Video must be of string type",
    AUDIO_ERROR: "There is some error in the audio file uploaded",
    AUDIO_FILE_REQUIRED: "Audio File is required",
    AUDIO_FILE_FORMAT:
      "Only .mp3 & .wav formats are allowed for Exhaust Note Audio",
    VIDEO_ERROR: "There is some error in the Video file uploaded",
    VIDEO_FILE_REQUIRED: "Video File is required",
    VIDEO_FILE_FORMAT: "Only .mp4 formats are allowed for Featured Videos",
  },
  carResponses = {
    ADDED_SUCCESS: "Car Added successfully",
    FETCH_SUCCESS: "All Cars Data fetched successfully",
    CAR_DATA_FETCH_SUCCESS: "Car full information fetched successfully",
    CAR_INFO_FETCH_SUCCESS: "Car Info fetched successfully",
    CAR_INFO_UPDATE_SUCCESS: "Car Info updated successfully",
    SPECIFICATIONS_UPDATE_SUCCESS: "Car specifications updated successfully",
    SUMMARY_GENERATE_SUCCESS: "Car Summary generated successfully",
  },
  updateCarInfoErrors = {
    CAR_ID_STRING: "Car ID must be of string type",
    CAR_ID_EMPTY: "Car ID cannot be empty",
    CAR_ID_REQUIRED: "Car ID is a required field",
    INFO_STRING: "Car Info must be of string type",
    INFO_REQUIRED: "Car Info is a required field",
  },
  updateSpecificsErrors = {
    CAR_ID_STRING: "Car ID must be of string type",
    CAR_ID_EMPTY: "Car ID cannot be empty",
    CAR_ID_REQUIRED: "Car ID is a required field",
    VALUE_STRING: "Value must be of string type",
    VALUE_REQUIRED: "Value is a required field",
    FEATURE_BOOLEAN: "Feature must be of boolean type",
    FEATURE_REQUIRED: "Feature is a required field",
    INNER_SPECIFICATIONS_OBJECT:
      "Property inside the Specifications must be a type of object",
    SPECIFICATIONS_OBJECT: "Specifications must be a type of object",
    SPECIFICATIONS_REQUIRED: "Specifications is required",
    SPECIFICATIONS_PROPERTY_REQUIRED:
      "Specification property is required to update",
  },
  summaryErrors = {
    CAR_NOT_FOUND: "No car is found for the given carID",
  },
  serverErrors = {
    INTERNAL_SERVER_ERROR: "Something went wrong",
  };
